"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[6388],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>u});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),d=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=d(e.components);return r.createElement(s.Provider,{value:t},e.children)},h={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=d(n),u=a,m=p["".concat(s,".").concat(u)]||p[u]||h[u]||o;return n?r.createElement(m,i(i({ref:t},c),{},{components:n})):r.createElement(m,i({ref:t},c))}));function u(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=p;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var d=2;d<o;d++)i[d]=n[d];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},1113:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>l,metadata:()=>d,toc:()=>h});var r=n(7462),a=n(3366),o=(n(7294),n(3905)),i=["components"],l={id:"learn-selendra-host",title:"Selendra Host (PH)",sidebar_label:"Selendra Host",description:"Learn about the components of the Selendra host.",keywords:["selendra host","runtime"],slug:"../learn-selendra-host"},s=void 0,d={unversionedId:"learn/learn-selendra-host",id:"learn/learn-selendra-host",title:"Selendra Host (PH)",description:"Learn about the components of the Selendra host.",source:"@site/../docs/learn/learn-selendra-host.md",sourceDirName:"learn",slug:"/learn-selendra-host",permalink:"/docs/learn-selendra-host",draft:!1,editUrl:"https://github.com/selendra/selendra-wiki/edit/master/docs/learn/learn-selendra-host.md",tags:[],version:"current",frontMatter:{id:"learn-selendra-host",title:"Selendra Host (PH)",sidebar_label:"Selendra Host",description:"Learn about the components of the Selendra host.",keywords:["selendra host","runtime"],slug:"../learn-selendra-host"},sidebar:"docs",previous:{title:"Nominator",permalink:"/docs/learn-nominator"},next:{title:"SelendraJS",permalink:"/docs/learn-selendrajs"}},c={},h=[{value:"Components of the Selendra host",id:"components-of-the-selendra-host",level:2},{value:"Diagram",id:"diagram",level:2}],p={toc:h};function u(e){var t=e.components,l=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},p,l,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"The architecture of Selendra can be divided into two different parts, the Selendra ",(0,o.kt)("em",{parentName:"p"},"runtime")," and the\nSelendra ",(0,o.kt)("em",{parentName:"p"},"host"),". The Selendra runtime is the core state transition logic of the chain and can be\nupgraded over the course of time and without the need for a hard fork. In comparison, the Selendra\nhost is the environment in which the runtime executes and is expected to remain stable and mostly\nstatic over the lifetime of Selendra."),(0,o.kt)("p",null,"The Selendra host interacts with the Selendra runtime in limited, and well-specified ways. For this\nreason, implementation teams can build an alternative implementation of the Selendra host while\ntreating the Selendra runtime as a black box. For more details of the interactions between the host\nand the runtime, please see the ","[specification][]","."),(0,o.kt)("h2",{id:"components-of-the-selendra-host"},"Components of the Selendra host"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Networking components such as Libp2p that facilitates network interactions."),(0,o.kt)("li",{parentName:"ul"},"State storage and the storage trie along with the database layer."),(0,o.kt)("li",{parentName:"ul"},"Consensus engine for GRANDPA and BABE."),(0,o.kt)("li",{parentName:"ul"},"Wasm interpreter and virtual machine."),(0,o.kt)("li",{parentName:"ul"},"Low level primitives for a blockchain, such as cryptographic primitives like hash functions.")),(0,o.kt)("p",null,"A compiled Selendra runtime, a blob of Wasm code, can be uploaded into the Selendra host and used as\nthe logic for the execution of state transitions. Without a runtime, the Selendra host is unable to\nmake state transitions or produce any blocks."),(0,o.kt)("h2",{id:"diagram"},"Diagram"),(0,o.kt)("p",null,"Below is a diagram that displays the Selendra host surrounding the Selendra runtime. Think of the\nruntime (in white) as a component that can be inserted, swapped out, or removed entirely. While the\nparts in grey are stable and can not change without an explicit hard fork."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"Selendra host",src:n(8968).Z,width:"923",height:"1018"})))}u.isMDXComponent=!0},8968:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/images/updated_pre-d5849e650527f0dc796f8cad044d1f35.png"}}]);